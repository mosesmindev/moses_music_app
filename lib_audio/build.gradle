apply plugin: 'com.android.library'
// 1、lib_audio是后面要重点开发的库
// 2、有很多试验性和接入性的功能都是在lib_audio中完成
// 3、需要上传到maven仓库，就要引入maven插件
apply plugin: 'maven'//maven插件已经被gradle自动依赖进来了，所以不需要依赖任何第三方插件就可以直接引入maven插件

def pomName = this.getName()// 获取当前项目工程（module）的名称  (this代表当前构建脚本所属的Project对象，即当前module：lib_audio)
def pomVersion ='1.0.0-SNAPSHOT'   // 我们要上传的库的版本号
def pomDescription = 'the audio library for all projects'


android {
    compileSdkVersion 28  // AS默认30
    // AS默认buildToolsVersion 30.0.3
    // buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28 // AS默认30
        versionCode 1
        versionName "1.0"

        // testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" // AS默认生成的支持androidx
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
   //implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    // AS默认生成的一些不用的依赖库，诸如androidx junit test这些都注释掉
    testImplementation 'junit:junit:4.12'//其实也应该注释掉  不注释是因为lib_audio下的com.moses.lib_audio(androidTest/test)总是生成示例但愿测试类 ExampleUnitTest.java 需要用到junit依赖包
    //androidTestImplementation 'androidx.test:runner:1.1.1'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

// 4、有了maven插件后，开始配置maven插件：上传maven配置
uploadArchives{
        repositories {
                // 完善maven仓库和maven管理的工程（module）项目信息
                mavenDeployer{
                    // 指定maven私服仓库的地址、用户名、密码
                    repository(url: NEXUS_REPOSITORY_URL){
                            // 注意用户名的正确写法：userName
                            authentication(userName: NEXUS_USERNAME,
                            password: NEXUS_PASSWORD)
                    }
                    // 为maven仓库指定上传的工程（module）project的工程（module）名、版本号……
                    pom.project{
                        name pomName
                        version pomVersion
                        description pomDescription
                        artifactId pomVersion //工程（module）ID?
                        groupId POM_GROUPID // 使用gradle.properties文件中定义的POM_GROUPID
                        packaging POM_PACKAGING  // 使用gradle.properties文件中定义的POM_PACKAGING
                    }
                }
        }
}